import React, { useState, useRef, useEffect } from 'react';
import { fabric } from 'fabric';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import * as pdfjsLib from 'pdfjs-dist';
import { createWorker } from 'tesseract.js';
import { FaEdit, FaImage, FaSignature, FaDrawPolygon, FaHighlighter, 
  FaFont, FaEraser, FaPenNib, FaRegComment, FaPaperclip, FaSave, 
  FaUpload, FaUndo, FaRedo, FaSearch, FaArrowsAlt, FaStamp } from 'react-icons/fa';

// Initialize PDF.js worker
pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;

/**
 * Advanced PDF Editor component with rich editing capabilities
 * Features:
 * - Text editing
 * - Image insertion
 * - Shape drawing
 * - Annotations
 * - Form filling
 * - Signatures
 * - Page management
 */
const PDFEditor = () => {
  // State for PDF document and rendering
  const [pdfDoc, setPdfDoc] = useState(null);
  const [pdfFile, setPdfFile] = useState(null);
  const [pdfName, setPdfName] = useState('');
  const [pdfUrl, setPdfUrl] = useState(null);
  const [pageCount, setPageCount] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [scale, setScale] = useState(1.0);
  const [rotation, setRotation] = useState(0);
  const [pdfPageImages, setPdfPageImages] = useState([]);
  
  // State for editor tools and modes
  const [activeToolMode, setActiveToolMode] = useState('cursor');
  const [textContent, setTextContent] = useState('');
  const [textPosition, setTextPosition] = useState({ x: 0, y: 0 });
  const [selectedFont, setSelectedFont] = useState('Helvetica');
  const [fontSize, setFontSize] = useState(12);
  const [fontColor, setFontColor] = useState('#000000');
  const [isDrawing, setIsDrawing] = useState(false);
  const [drawingPath, setDrawingPath] = useState([]);
  const [annotations, setAnnotations] = useState([]);
  const [undoStack, setUndoStack] = useState([]);
  const [redoStack, setRedoStack] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  
  // Refs for canvas and file input
  const canvasRef = useRef(null);
  const fileInputRef = useRef(null);
  const containerRef = useRef(null);
  const pdfViewerRef = useRef(null);
  
  // Available fonts
  const availableFonts = [
    { name: 'Helvetica', value: StandardFonts.Helvetica },
    { name: 'Times Roman', value: StandardFonts.TimesRoman },
    { name: 'Courier', value: StandardFonts.Courier },
    { name: 'Symbol', value: StandardFonts.Symbol },
    { name: 'ZapfDingbats', value: StandardFonts.ZapfDingbats }
  ];
  
  // Add color options for drawing
  const [drawingColor, setDrawingColor] = useState('#000000'); // Default to black
  
  // Add state for highlighting
  const [highlightColor, setHighlightColor] = useState('#ffff00'); // Default to yellow
  const [isHighlighting, setIsHighlighting] = useState(false);
  const [highlightStart, setHighlightStart] = useState({ x: 0, y: 0 });
  const [highlightEnd, setHighlightEnd] = useState({ x: 0, y: 0 });
  
  // Add state for image insertion
  const [selectedImage, setSelectedImage] = useState(null);
  const [imagePosition, setImagePosition] = useState({ x: 0, y: 0 });
  const [imageSize, setImageSize] = useState({ width: 200, height: 200 });
  const [isPlacingImage, setIsPlacingImage] = useState(false);
  const imageInputRef = useRef(null);
  
  // Add state for signature
  const [signatureMode, setSignatureMode] = useState('draw'); // 'draw', 'upload', or 'type'
  const [signatureData, setSignatureData] = useState(null);
  const [signatureText, setSignatureText] = useState('');
  const [signatureFont, setSignatureFont] = useState('cursive');
  const [signatureColor, setSignatureColor] = useState('#000000');
  const [isDrawingSignature, setIsDrawingSignature] = useState(false);
  const [signaturePath, setSignaturePath] = useState([]);
  const signatureCanvasRef = useRef(null);
  const signatureFileRef = useRef(null);
  
  // Add state for eraser
  const [eraserSize, setEraserSize] = useState(20);
  const [isErasing, setIsErasing] = useState(false);
  
  // Text editing state
  const [textOptions, setTextOptions] = useState({
    font: 'Helvetica',
    size: 16,
    color: '#000000',
    align: 'left'
  });
  
  // Drawing options state
  const [drawingOptions, setDrawingOptions] = useState({
    color: '#000000',
    width: 2,
    opacity: 1
  });
  
  // Refs
  const fabricCanvasRef = useRef(null);
  
  // OCR worker ref
  const ocrWorkerRef = useRef(null);
  
  // Initialize Fabric.js canvas
  useEffect(() => {
    if (canvasRef.current && !fabricCanvasRef.current) {
      fabricCanvasRef.current = new fabric.Canvas(canvasRef.current, {
        isDrawingMode: false,
        selection: true,
        preserveObjectStacking: true
      });
      
      // Set up event listeners
      fabricCanvasRef.current.on('object:modified', handleObjectModified);
      fabricCanvasRef.current.on('path:created', handlePathCreated);
      
      // Initialize drawing brush
      const brush = fabricCanvasRef.current.freeDrawingBrush;
      brush.color = drawingOptions.color;
      brush.width = drawingOptions.width;
    }
    
    return () => {
      if (fabricCanvasRef.current) {
        fabricCanvasRef.current.dispose();
      }
    };
  }, []);
  
  // Initialize OCR worker
  useEffect(() => {
    const initOCR = async () => {
      if (!ocrWorkerRef.current) {
        ocrWorkerRef.current = await createWorker();
        await ocrWorkerRef.current.loadLanguage('eng');
        await ocrWorkerRef.current.initialize('eng');
      }
    };
    
    initOCR();
    
    return () => {
      if (ocrWorkerRef.current) {
        ocrWorkerRef.current.terminate();
      }
    };
  }, []);
  
  // Load PDF.js library
  useEffect(() => {
    // Load pdf.js script
    const loadPdfJS = async () => {
      if (!window.pdfjsLib) {
        try {
          // Loading PDF.js from CDN
          const script = document.createElement('script');
          script.src = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.7.107/pdf.min.js';
          script.async = true;
          document.body.appendChild(script);
          
          await new Promise((resolve, reject) => {
            script.onload = resolve;
            script.onerror = reject;
          });
          
          // Set worker source
          window.pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.7.107/pdf.worker.min.js';
          
          console.log('PDF.js loaded successfully');
        } catch (err) {
          console.error('Failed to load PDF.js', err);
          setError('Failed to load PDF viewer. Please refresh the page.');
        }
      }
    };
    
    loadPdfJS();
    
    return () => {
      // Clean up
      if (pdfUrl) {
        URL.revokeObjectURL(pdfUrl);
      }
    };
  }, []);
  
  // Load PDF from file
  const loadPDF = async (file) => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Read the file
      const arrayBuffer = await file.arrayBuffer();
      
      // Create a URL for preview
      const url = URL.createObjectURL(file);
      setPdfUrl(url);
      setPdfFile(file);
      setPdfName(file.name);
      
      // Load the PDF using pdf-lib for editing
      const pdfDoc = await PDFDocument.load(arrayBuffer);
      setPdfDoc(pdfDoc);
      
      // Get page count
      const pageCount = pdfDoc.getPageCount();
      setPageCount(pageCount);
      setCurrentPage(1);
      
      // Also load with PDF.js for rendering
      if (window.pdfjsLib) {
        const loadingTask = window.pdfjsLib.getDocument(arrayBuffer);
        const pdf = await loadingTask.promise;
        
        // Pre-render all pages as images
        const pageImages = [];
        for (let i = 1; i <= pageCount; i++) {
          const page = await pdf.getPage(i);
          const viewport = page.getViewport({ scale: 1 });
          
          // Create an off-screen canvas for this page
          const canvas = document.createElement('canvas');
          const context = canvas.getContext('2d');
          canvas.height = viewport.height;
          canvas.width = viewport.width;
          
          // Render the page to the canvas
          await page.render({
            canvasContext: context,
            viewport: viewport
          }).promise;
          
          // Store the canvas as a data URL
          pageImages.push(canvas.toDataURL());
        }
        
        setPdfPageImages(pageImages);
        
        console.log(`Loaded PDF with ${pageCount} pages`);
      }
      
      // Reset editing state
      setActiveToolMode('cursor');
      setAnnotations([]);
      setUndoStack([]);
      setRedoStack([]);
      
      setIsLoading(false);
    } catch (err) {
      console.error('Error loading PDF:', err);
      setError(`Failed to load PDF: ${err.message}`);
      setIsLoading(false);
    }
  };
  
  // Handle file selection
  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    if (file && (file.type === 'application/pdf')) {
      loadPDF(file);
    } else {
      setError('Please select a valid PDF file.');
    }
  };
  
  // Handle file drop
  const handleDrop = (event) => {
    event.preventDefault();
    event.stopPropagation();
    
    // Get the dropped file
    const file = event.dataTransfer.files[0];
    if (file && file.type === 'application/pdf') {
      loadPDF(file);
    } else {
      setError('Please drop a valid PDF file.');
    }
  };
  
  // Render the current page on canvas
  useEffect(() => {
    if (canvasRef.current && pdfPageImages.length > 0 && currentPage <= pdfPageImages.length) {
      renderCurrentPage();
    }
  }, [currentPage, pdfPageImages, scale, rotation]);
  
  // Render the current page
  const renderCurrentPage = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const context = canvas.getContext('2d');
    const pageIndex = currentPage - 1;
    
    if (pageIndex < 0 || pageIndex >= pdfPageImages.length) {
      console.error('Invalid page index:', pageIndex);
      return;
    }
    
    // Create an image from the stored data URL
    const img = new Image();
    img.onload = () => {
      // Calculate dimensions
      const originalWidth = img.width;
      const originalHeight = img.height;
      
      // Apply scale
      const scaledWidth = originalWidth * scale;
      const scaledHeight = originalHeight * scale;
      
      // Set canvas dimensions
      canvas.width = scaledWidth;
      canvas.height = scaledHeight;
      
      // Clear canvas
      context.clearRect(0, 0, canvas.width, canvas.height);
      
      // Save context state for rotation
      context.save();
      
      // Apply rotation if needed
      if (rotation !== 0) {
        context.translate(scaledWidth / 2, scaledHeight / 2);
        context.rotate((rotation * Math.PI) / 180);
        context.translate(-scaledWidth / 2, -scaledHeight / 2);
      }
      
      // Draw the image
      context.drawImage(img, 0, 0, scaledWidth, scaledHeight);
      
      // Restore context state
      context.restore();
      
      // Draw any annotations
      renderAnnotations(context);
    };
    
    img.src = pdfPageImages[pageIndex];
  };
  
  // Render annotations on the canvas
  const renderAnnotations = (context) => {
    annotations.forEach(annotation => {
      if (annotation.page === currentPage) {
        switch (annotation.type) {
          case 'text':
            context.font = `${annotation.fontSize}px ${annotation.font}`;
            context.fillStyle = annotation.color;
            context.fillText(annotation.text, annotation.x, annotation.y);
            break;
          case 'draw':
            context.strokeStyle = annotation.color;
            context.lineWidth = annotation.lineWidth;
            context.beginPath();
            const points = annotation.points;
            if (points.length > 0) {
              context.moveTo(points[0].x, points[0].y);
              for (let i = 1; i < points.length; i++) {
                context.lineTo(points[i].x, points[i].y);
              }
            }
            context.stroke();
            break;
          case 'highlight':
            context.fillStyle = annotation.color;
            context.globalAlpha = 0.5; // Semi-transparent
            context.fillRect(
              annotation.x,
              annotation.y,
              annotation.width,
              annotation.height
            );
            context.globalAlpha = 1.0; // Reset transparency
            break;
          case 'image':
            const img = new Image();
            img.onload = () => {
              context.drawImage(img, annotation.x, annotation.y, annotation.width, annotation.height);
            };
            img.src = annotation.imageData;
            break;
          case 'signature':
            const sigImg = new Image();
            sigImg.onload = () => {
              context.drawImage(sigImg, annotation.x, annotation.y, annotation.width, annotation.height);
            };
            sigImg.src = annotation.imageData;
            break;
          // Other annotation types would be handled here
          default:
            break;
        }
      }
    });
  };
  
  // Handle tool selection
  const handleToolSelect = (toolId) => {
    setActiveToolMode(toolId);
    
    if (fabricCanvasRef.current) {
      // Update Fabric.js canvas mode
      switch (toolId) {
        case 'draw':
          fabricCanvasRef.current.isDrawingMode = true;
          break;
        case 'text':
          fabricCanvasRef.current.isDrawingMode = false;
          addTextBox();
          break;
        case 'shape':
          fabricCanvasRef.current.isDrawingMode = false;
          break;
        case 'image':
          fabricCanvasRef.current.isDrawingMode = false;
          break;
        default:
          fabricCanvasRef.current.isDrawingMode = false;
      }
    }
  };
  
  // Add text box
  const addTextBox = () => {
    const text = new fabric.IText('Click to edit text', {
      left: 50,
      top: 50,
      fontFamily: textOptions.font,
      fontSize: textOptions.size,
      fill: textOptions.color,
      textAlign: textOptions.align,
      editable: true
    });
    
    fabricCanvasRef.current.add(text);
    fabricCanvasRef.current.setActiveObject(text);
    addToUndoStack();
  };
  
  // Add image
  const addImage = async (file) => {
    try {
      const reader = new FileReader();
      reader.onload = (e) => {
        fabric.Image.fromURL(e.target.result, (img) => {
          // Scale image to fit within canvas
          const scale = Math.min(
            (fabricCanvasRef.current.width / 2) / img.width,
            (fabricCanvasRef.current.height / 2) / img.height
          );
          
          img.scale(scale);
          img.set({
            left: 50,
            top: 50
          });
          
          fabricCanvasRef.current.add(img);
          fabricCanvasRef.current.setActiveObject(img);
          addToUndoStack();
        });
      };
      reader.readAsDataURL(file);
    } catch (err) {
      console.error('Error adding image:', err);
      setError('Failed to add image. Please try again.');
    }
  };
  
  // Add shape
  const addShape = (type) => {
    let shape;
    
    switch (type) {
      case 'rect':
        shape = new fabric.Rect({
          left: 50,
          top: 50,
          width: 100,
          height: 100,
          fill: 'transparent',
          stroke: drawingOptions.color,
          strokeWidth: drawingOptions.width
        });
        break;
      case 'circle':
        shape = new fabric.Circle({
          left: 50,
          top: 50,
          radius: 50,
          fill: 'transparent',
          stroke: drawingOptions.color,
          strokeWidth: drawingOptions.width
        });
        break;
      case 'arrow':
        // Create custom arrow shape
        const points = [0, 0, 100, 0, 95, -5, 100, 0, 95, 5];
        shape = new fabric.Polyline(points, {
          left: 50,
          top: 50,
          stroke: drawingOptions.color,
          strokeWidth: drawingOptions.width,
          fill: 'transparent',
          originX: 'left',
          originY: 'center'
        });
        break;
    }
    
    if (shape) {
      fabricCanvasRef.current.add(shape);
      fabricCanvasRef.current.setActiveObject(shape);
      addToUndoStack();
    }
  };
  
  // Handle object modification
  const handleObjectModified = () => {
    addToUndoStack();
  };
  
  // Handle path creation (drawing)
  const handlePathCreated = () => {
    addToUndoStack();
  };
  
  // Add to undo stack
  const addToUndoStack = () => {
    const json = fabricCanvasRef.current.toJSON();
    setUndoStack([...undoStack, json]);
    setRedoStack([]);
  };
  
  // Undo
  const handleUndo = () => {
    if (undoStack.length > 0) {
      const prevState = undoStack[undoStack.length - 1];
      const currentState = fabricCanvasRef.current.toJSON();
      
      setRedoStack([...redoStack, currentState]);
      setUndoStack(undoStack.slice(0, -1));
      
      fabricCanvasRef.current.loadFromJSON(prevState, () => {
        fabricCanvasRef.current.renderAll();
      });
    }
  };
  
  // Redo
  const handleRedo = () => {
    if (redoStack.length > 0) {
      const nextState = redoStack[redoStack.length - 1];
      const currentState = fabricCanvasRef.current.toJSON();
      
      setUndoStack([...undoStack, currentState]);
      setRedoStack(redoStack.slice(0, -1));
      
      fabricCanvasRef.current.loadFromJSON(nextState, () => {
        fabricCanvasRef.current.renderAll();
      });
    }
  };
  
  // Save the edited PDF
  const savePDF = async () => {
    if (!pdfDoc) {
      setError('No PDF document to save.');
      return;
    }
    
    try {
      setIsLoading(true);
      
      // Create a new PDF document
      const newPdfDoc = await PDFDocument.create();
      
      // Copy pages from original PDF
      const pages = await newPdfDoc.copyPages(pdfDoc, [0]);
      const page = pages[0];
      newPdfDoc.addPage(page);
      
      // Convert Fabric.js canvas to image
      const canvasDataUrl = fabricCanvasRef.current.toDataURL({
        format: 'png',
        quality: 1
      });
      
      // Add canvas content as image to PDF
      const pngImage = await newPdfDoc.embedPng(canvasDataUrl);
      const { width, height } = page.getSize();
      page.drawImage(pngImage, {
        x: 0,
        y: 0,
        width,
        height
      });
      
      // Save PDF
      const pdfBytes = await newPdfDoc.save();
      const blob = new Blob([pdfBytes], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      
      // Create download link
      const link = document.createElement('a');
      link.href = url;
      link.download = `edited_${pdfName || 'document.pdf'}`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      setIsLoading(false);
    } catch (err) {
      console.error('Error saving PDF:', err);
      setError(`Failed to save PDF: ${err.message}`);
      setIsLoading(false);
    }
  };
  
  // Extract text using OCR
  const extractText = async () => {
    try {
      setIsLoading(true);
      
      const canvas = canvasRef.current;
      const { data: { text } } = await ocrWorkerRef.current.recognize(canvas);
      
      // Add extracted text as editable text objects
      const lines = text.split('\n');
      lines.forEach((line, i) => {
        if (line.trim()) {
          const text = new fabric.IText(line, {
            left: 50,
            top: 50 + (i * 20),
            fontFamily: textOptions.font,
            fontSize: textOptions.size,
            fill: textOptions.color,
            editable: true
          });
          fabricCanvasRef.current.add(text);
        }
      });
      
      addToUndoStack();
      setIsLoading(false);
    } catch (err) {
      console.error('Error extracting text:', err);
      setError('Failed to extract text. Please try again.');
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-screen bg-gray-100">
      {/* Toolbar */}
      <div className="bg-white shadow-md p-4">
        <div className="flex items-center space-x-4">
          {/* File operations */}
          <div className="flex space-x-2">
            <button
              onClick={() => fileInputRef.current.click()}
              className="btn btn-primary"
            >
              <FaUpload className="mr-2" />
              Open PDF
            </button>
            <button
              onClick={savePDF}
              disabled={!pdfDoc}
              className="btn btn-success"
            >
              <FaSave className="mr-2" />
              Save
            </button>
          </div>
          
          {/* Tool selection */}
          <div className="flex space-x-2">
            {toolOptions.map(tool => (
              <button
                key={tool.id}
                onClick={() => handleToolSelect(tool.id)}
                className={`btn ${activeToolMode === tool.id ? 'btn-active' : ''}`}
              >
                {tool.icon}
              </button>
            ))}
          </div>
          
          {/* Undo/Redo */}
          <div className="flex space-x-2">
            <button
              onClick={handleUndo}
              disabled={undoStack.length === 0}
              className="btn"
            >
              <FaUndo />
            </button>
            <button
              onClick={handleRedo}
              disabled={redoStack.length === 0}
              className="btn"
            >
              <FaRedo />
            </button>
          </div>
          
          {/* Page navigation */}
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
              disabled={currentPage <= 1}
              className="btn"
            >
              Previous
            </button>
            <span>
              Page {currentPage} of {pageCount}
            </span>
            <button
              onClick={() => setCurrentPage(prev => Math.min(pageCount, prev + 1))}
              disabled={currentPage >= pageCount}
              className="btn"
            >
              Next
            </button>
          </div>
          
          {/* Zoom controls */}
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setScale(prev => Math.max(0.5, prev - 0.1))}
              className="btn"
            >
              -
            </button>
            <span>{Math.round(scale * 100)}%</span>
            <button
              onClick={() => setScale(prev => Math.min(2, prev + 0.1))}
              className="btn"
            >
              +
            </button>
          </div>
        </div>
      </div>
      
      {/* Main editor area */}
      <div className="flex flex-1 overflow-hidden">
        {/* Tools sidebar */}
        <div className="w-64 bg-white shadow-md p-4">
          {/* Tool-specific options */}
          {activeToolMode === 'text' && (
            <div className="space-y-4">
              <h3 className="font-semibold">Text Options</h3>
              <select
                value={textOptions.font}
                onChange={(e) => setTextOptions({...textOptions, font: e.target.value})}
                className="select select-bordered w-full"
              >
                {availableFonts.map(font => (
                  <option key={font.value} value={font.value}>{font.name}</option>
                ))}
              </select>
              <input
                type="number"
                value={textOptions.size}
                onChange={(e) => setTextOptions({...textOptions, size: parseInt(e.target.value)})}
                className="input input-bordered w-full"
                min="8"
                max="72"
              />
              <input
                type="color"
                value={textOptions.color}
                onChange={(e) => setTextOptions({...textOptions, color: e.target.value})}
                className="w-full h-10"
              />
            </div>
          )}
          
          {activeToolMode === 'draw' && (
            <div className="space-y-4">
              <h3 className="font-semibold">Drawing Options</h3>
              <input
                type="color"
                value={drawingOptions.color}
                onChange={(e) => setDrawingOptions({...drawingOptions, color: e.target.value})}
                className="w-full h-10"
              />
              <input
                type="range"
                value={drawingOptions.width}
                onChange={(e) => setDrawingOptions({...drawingOptions, width: parseInt(e.target.value)})}
                min="1"
                max="20"
                className="range"
              />
              <input
                type="range"
                value={drawingOptions.opacity}
                onChange={(e) => setDrawingOptions({...drawingOptions, opacity: parseFloat(e.target.value)})}
                min="0"
                max="1"
                step="0.1"
                className="range"
              />
            </div>
          )}
          
          {activeToolMode === 'shape' && (
            <div className="space-y-4">
              <h3 className="font-semibold">Shapes</h3>
              <div className="grid grid-cols-2 gap-2">
                <button onClick={() => addShape('rect')} className="btn">Rectangle</button>
                <button onClick={() => addShape('circle')} className="btn">Circle</button>
                <button onClick={() => addShape('arrow')} className="btn">Arrow</button>
              </div>
            </div>
          )}
        </div>
        
        {/* Canvas area */}
        <div className="flex-1 overflow-auto bg-gray-200 p-4" ref={containerRef}>
          <div className="relative inline-block">
            <canvas ref={canvasRef} className="shadow-lg" />
          </div>
        </div>
      </div>
      
      {/* Hidden file input */}
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileSelect}
        accept=".pdf"
        className="hidden"
      />
      
      {/* Loading overlay */}
      {isLoading && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-4 rounded-lg shadow-lg">
            <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500"></div>
            <p className="mt-2">Loading...</p>
          </div>
        </div>
      )}
      
      {/* Error modal */}
      {error && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg max-w-md">
            <h3 className="text-lg font-semibold text-red-600 mb-2">Error</h3>
            <p className="text-gray-700">{error}</p>
            <button
              onClick={() => setError(null)}
              className="mt-4 btn btn-error w-full"
            >
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// Tool options configuration
const toolOptions = [
  { id: 'cursor', icon: <FaArrowsAlt /> },
  { id: 'text', icon: <FaFont /> },
  { id: 'draw', icon: <FaPenNib /> },
  { id: 'shape', icon: <FaDrawPolygon /> },
  { id: 'highlight', icon: <FaHighlighter /> },
  { id: 'image', icon: <FaImage /> },
  { id: 'stamp', icon: <FaStamp /> },
  { id: 'erase', icon: <FaEraser /> }
];

export default PDFEditor; 